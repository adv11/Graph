/**
Given an m x n 2D binary grid grid which represents a map of '1's (land) and '0's (water), return the number of islands.
An island is surrounded by water and is formed by connecting adjacent lands horizontally or vertically. 
You may assume all four edges of the grid are all surrounded by water.

Example 1:
Input: grid = [
  ["1","1","1","1","0"],
  ["1","1","0","1","0"],
  ["1","1","0","0","0"],
  ["0","0","0","0","0"]
]
Output: 1

Example 2:
Input: grid = [
  ["1","1","0","0","0"],
  ["1","1","0","0","0"],
  ["0","0","1","0","0"],
  ["0","0","0","1","1"]
]
Output: 3
 
Constraints:
m == grid.length
n == grid[i].length
1 <= m, n <= 300
grid[i][j] is '0' or '1'
*/

class Solution {
    public int numIslands(char[][] grid) {
        int row = grid.length;  // number of rows
        int col = grid[0].length;   // number of columns
        int numberIslands = 0;  // variable for counting the number of islands
        
        // traversing the whole grid array
        for(int i=0 ; i<row ; i++){
            for(int j=0 ; j<col ; j++){
                
                // if grid[i][j] == '1' then call for dfs
                if(grid[i][j] == '1'){
                    numberIslands++;
                    helper(grid, i, j, row, col);
                }
            }
        }
        return numberIslands;
    }
    public void helper(char[][] grid, int i, int j, int row, int col){
        // This is the termination condition
        if(i<0 || i>=row || j<0 || j>=col || grid[i][j]=='0'){
            return;
        }
        
        // Now put '0' in place of '1'
        grid[i][j] = '0';
        
        // Now call dfs for all the four sides : Up, Down, Left, Right
        helper(grid, i-1, j, row, col);     // Up
        helper(grid, i+1, j, row, col);     // Down
        helper(grid, i, j-1, row, col);     // Left
        helper(grid, i, j+1, row, col);     // Right
    }
}
